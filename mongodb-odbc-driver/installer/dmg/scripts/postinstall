#!/usr/bin/python
import errno
import os
import sys

if sys.version_info.major == 2:
    import ConfigParser as configparser
else:
    import configparser

# Find the latest version directory. We do this because there
# is no good way to pass the current version to the post install
# script, and we don't want to have to update this script every
# release.
def get_latest(path):
    vers = []
    for d in os.listdir(path):
        if not os.path.isdir(os.path.join(path, d)):
            continue
        ver_parts = d.split('.')
        # All valid versions must contain 3 numeric parts.
        if len(ver_parts) != 3:
            continue
        try:
            ver_parts = map(int, ver_parts)
        except:
            continue
        vers.append(ver_parts)
    vers.sort()
    return ".".join(map(str, vers[-1])) if len(vers) != 0 else ""

ODBC_PATH       = '/Library/ODBC'
INI             = '%s/odbcinst.ini'%ODBC_PATH
INSTALL_ROOT    = '/Library/MongoDB/ODBC/'
LATEST          = get_latest(INSTALL_ROOT)
INSTALL_PATH    = INSTALL_ROOT + LATEST
DRIVERS_SECTION = 'ODBC Drivers'
MDB_UNICODE     = 'MongoDB Unicode ODBC %s'%LATEST
MDB_ANSI        = 'MongoDB ANSI ODBC %s'%LATEST
DRIVERS         = {
                     MDB_UNICODE: '%s/libmdbodbcw.so'%INSTALL_PATH,
                     MDB_ANSI:    '%s/libmdbodbca.so'%INSTALL_PATH
                  }

def mkdir_p(path):
    try:
        os.makedirs(path)
    except OSError as exc:
        if exc.errno == errno.EEXIST and os.path.isdir(path):
            pass
        else:
            raise

def install_driver(config, driver):
    if not config.has_option(DRIVERS_SECTION, driver):
        config.set(DRIVERS_SECTION, driver, '')
    if config.get(DRIVERS_SECTION, driver) != "Installed":
        config.set(DRIVERS_SECTION, driver, "Installed")
    if not config.has_section(driver):
        config.add_section(driver)
    config.set(driver, 'Driver', DRIVERS[driver])

def main():
    if not os.path.exists(ODBC_PATH):
        mkdir_p('/Library/ODBC')
    if not os.path.exists(INI):
        with open(INI, 'w') as ini_writer:
            print >> ini_writer, '[ODBC Drivers]'
    config = configparser.ConfigParser()
    config.optionxform = str
    with open(INI) as ini_reader:
        if sys.version_info.major == 3:
            config.read_file(ini_reader)
        else:
            config.readfp(ini_reader)
    for driver in DRIVERS:
        install_driver(config, driver)
    with open(INI, 'w') as ini_writer:
        config.write(ini_writer)

if __name__ == '__main__':
    main()
